{"version":3,"file":"CommandDispatcher.js","sourceRoot":"","sources":["../CommandDispatcher.ts"],"names":[],"mappings":";;;;;;;;;;;;AAkBA,MAAa,iBAAiB;IAEb,aAAa,CAA6B,OAAY;;YAC/D,MAAM,eAAe,GAAG,OAAO,CAAC,gBAAgB,CAAA;YAChD,IAAI,aAAa,GAAG,IAAI,eAAe,EAAE,CAAC;YAC1C,OAAO,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;KAAA;IAED,QAAQ,CAA4B,OAAY;QAC5C,MAAM,eAAe,GAAG,OAAO,CAAC,gBAAgB,CAAA;QAChD,IAAI,aAAa,GAAG,IAAI,eAAe,EAAE,CAAC;QAC1C,OAAO,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;CAEJ;AAdD,8CAcC","sourcesContent":["\r\n\r\nexport interface ICommandHandler<TIn,VOut>{\r\n    execute(command:TIn):VOut\r\n}\r\n\r\nexport interface ICommand{\r\n    handlerReference:any;\r\n}\r\n\r\nexport interface ICommandDispatcher{\r\n\r\n    Dispatch<TIn extends ICommand,VOut>(command:TIn):VOut;\r\n\r\n    DispatchAsync<TIn extends ICommand,VOut>(command:TIn):Promise<VOut>;\r\n\r\n}\r\n\r\nexport class CommandDispatcher implements ICommandDispatcher{\r\n\r\n    public async DispatchAsync<TIn extends ICommand, VOut>(command: TIn): Promise<VOut> {\r\n        const handlerInstance = command.handlerReference\r\n        var classInstance = new handlerInstance();\r\n        return classInstance.execute(command);        \r\n    }\r\n    \r\n    Dispatch<TIn extends ICommand,VOut>(command: TIn): VOut {\r\n        const handlerInstance = command.handlerReference\r\n        var classInstance = new handlerInstance();\r\n        return classInstance.execute(command); \r\n    }\r\n\r\n}"]}